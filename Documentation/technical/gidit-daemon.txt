git-gidit-daemon
=============

Overall operation
-----------------

. Connects to the gidit cloud and handles bundle send/receiving

. Learns what refs the cloud has and what is needed, pulls in 
  what is needed, and forwards off to the git client.

. Daemon runs, and participates in cloud operations while 
  waiting for actions from local git clients.

. Called by git client and provides shim between it and the chimera DHT

Client-Daemon Operations
------------------------

. proj-init

<<<<<<< HEAD:Documentation/technical/gidit-daemon.txt
	Initializes a user's gidit project directory. This involves saving their 
	public PGP key as well, if it does not already exist.
=======
	Initializes a user's gidit project directory. This involves saving their public PGP
	key as well, if it does not already exist.
>>>>>>> Not sure what changes in this one....:Documentation/technical/gidit-daemon.txt

	Format is:
	[projname]\n[pgp public key]

	Can be accessed through:
	echo -n <stuff> | git gidit --proj-init -b /path/to/gidit/

	pgp key is the binary output, equivalent to gpg --export

. updatepl

	Updates the pushobject list by creating a new head.

	PushObjects when sent off from client to daemon are in this form:
	[sha1 of pgpkey][projname]\n[signed pushobject]

	The [sha1 of pgpkey] is the binary output of your pgpkey sha1'd,
	equivalent to `gpg --export [id] | sha1sum`.

	This can be invoked with:
	echo -n <stuff> | git gidit --updatepl -b /var/gidit/

. store-bundle
	
	Stores a given bundle. The bundle is preceded by the sha1 of the
	pushobject it bases off of, and the sha1 of the pushobject it brings the
	user to. Followed by the bundle.

	[SHA1 Pobj Start][SHA1 Pobj End][Bundle]

	This is slated to change due to security considerations. Bundles would
	most likely need to be signed, and multiple bundles for same pobjs could
	be possible.


. get-bundle
	
	Returns a given bundle. 

	[SHA1 Pobj Start][SHA1 Pobj End]

